df_recall_long <- df_recall_wide %>%
pivot_longer(cols = starts_with("SR-"),
names_to = "PID",
values_to = "Recalled") %>%
select(c(PID,Scene,Recalled)) %>%
merge(.,
subset(df_qual, !is.na(df_qual$Rated), select = c("PID","Rated")),
by = "PID")
table(df_recall_long$PID)
df_recall_long <- df_recall_wide %>%
pivot_longer(cols = starts_with("SR-"),
names_to = "PID",
values_to = "Recalled") %>%
select(c(PID,Scene,Recalled)) %>%
merge(.,
subset(df_qual, !is.na(df_qual$Rated), select = c("PID","Rated")),
by = "PID") %>%
distinct()
table(df_recall_long$PID)
View(df_qual)
View(df_qual)
df_recall_long <- df_recall_wide %>%
pivot_longer(cols = starts_with("SR-"),
names_to = "PID",
values_to = "Recalled") %>%
select(c(PID,Scene,Recalled)) %>%
merge(.,
subset(df_qual, select = c("PID","Rated")),
by = "PID") %>%
distinct()
df_recall_long <- df_recall_wide %>%
pivot_longer(cols = starts_with("SR-"),
names_to = "PID",
values_to = "Recalled") %>%
select(c(PID,Scene,Recalled)) %>%
merge(.,
subset(df_qual, select = c("PID","Rated")),
by = "PID", all.x = T) %>%
distinct()
View(df_recall_long)
df_qual <- read.csv(paste0(dir_Work, "/3_Data/Qualtrics/df_qualtrics.csv")) %>%
select("PID", starts_with("ChrAssess_"))
View(df_qual)
df_qual <- read.csv(paste0(dir_Work, "/3_Data/Qualtrics/df_qualtrics.csv")) %>%
select("PID", starts_with("ChrAssess_")) %>%
na.omit()
df_qual <- read.csv(paste0(dir_Work, "/3_Data/Qualtrics/df_qualtrics.csv")) %>%
select("PID", starts_with("ChrAssess_")) %>%
# na.omit() %>%
merge(x = paste0(dir_Work, "/3_Data/conditions.csv") %>% read.csv() %>% .[,1:2],
y = .,
by.x = "Subject",
by.y = "PID")
View(df_qual)
df_qual <- read.csv(paste0(dir_Work, "/3_Data/Qualtrics/df_qualtrics.csv")) %>%
select("PID", starts_with("ChrAssess_")) %>%
# na.omit() %>%
merge(x = paste0(dir_Work, "/3_Data/conditions.csv") %>% read.csv() %>% .[,1:2],
y = .,
by.x = "Subject",
by.y = "PID") %>%
pivot_longer(cols = starts_with("ChrAssess_"),
names_to = "Category",
values_to = "Assessment") %>%
mutate(Character = str_extract(string = Category, "(?<=ChrAssess_)[^_]+"),
Category = str_extract(string = Category, "[^_]+$"),
PID = Subject) %>%
select(-Subject)
View(df_qual)
## From this we want to know who participants had thought had done it at the end of each section
df_qual <- read.csv(paste0(dir_Work, "/3_Data/Qualtrics/df_qualtrics.csv")) %>%
select("PID", starts_with("ChrAssess_")) %>%
# na.omit() %>%
merge(x = paste0(dir_Work, "/3_Data/conditions.csv") %>% read.csv() %>% .[,1:2],
y = .,
by.x = "Subject",
by.y = "PID") %>%
pivot_longer(cols = starts_with("ChrAssess_"),
names_to = "Category",
values_to = "Assessment") %>%
mutate(Character = str_extract(string = Category, "(?<=ChrAssess_)[^_]+"),
Category = str_extract(string = Category, "[^_]+$"),
PID = Subject) %>%
select(-Subject)
## Noting who rated which half
df_qual$Rated <- NA
df_qual$Rated[which(df_qual$PID %in% unique(subset(read.csv(paste0(dir_Work, "/3_Data/Ratings/df_behav.csv")), Condition == "A")$PID))] <- "First"
df_qual$Rated[which(df_qual$PID %in% unique(subset(read.csv(paste0(dir_Work, "/3_Data/Ratings/df_behav.csv")), Condition == "B")$PID))] <- "Last"
df_recall <- read.csv(paste0(dir_Work,"/3_Data/Recall/df_recall.csv")) %>%
# Remove all rows in which every value is NA
na.omit() %>%
# Patching up the PID variable names (Can't have variable names that start with numbers)
mutate(PID = paste0("SR-", sprintf("%04d", as.integer(PID))))
# Save every unique PID as a variable
PIDs <- unique(df_recall$PID)
# Specifying the names of rows and columns in the new dataframe
cols <- c("PID", "Scene", "Recalled")
rows <- 1:((length(PIDs)) * 35)
# Creating  the new dataframe
df_recall_wide <- as.data.frame(matrix(NA,
nrow = length(rows),
ncol =  length(cols),
dimnames = list(rows,
cols))) %>%
# Repeating the numbers 1 through 35 a number of times equivalent to the number of unique PIDs there are
mutate(Scene = PIDs %>% length() %>% rep(1:35, .),
# Repeating each of the unique PIDs a number of times equivalent to the number of scenes there are and sorting them alphanumerically
PID = PIDs %>% rep(., 35) %>% sort())
# Cleaning space
rm(cols,rows)
# Make all data equal to 0
df_recall_wide$Recalled <- 0
# Iterate through every PID
for (PID in PIDs){
# Iterate through every scene
for (SCENE in unique(df_recall_wide$Scene)){
# If any PID / Scene combo is present in the original dataframe
if (any(df_recall$PID == PID & df_recall$Scenes == SCENE)){
# Then find that PID / Scene Combo in the new dataframe and change the 0 to a 1
df_recall_wide$Recalled[df_recall_wide$PID == PID & df_recall_wide$Scene == SCENE] <- 1
}
}
}
rm(PID, df_recall)
# Pivoting to a wider format
df_recall_wide <- pivot_wider(df_recall_wide,
names_from = PID,
values_from = Recalled) %>%
.[-c(3,7,14,26,29,32,34),] # Removing B-Roll Transitions
# Calculating the average relative order of each scene
df_recall_wide$GroupAvg <- rowMeans(df_recall_wide[,2:ncol(df_recall_wide)], na.rm = T)
# Plotting
plot(df_recall_wide$Scene, df_recall_wide$GroupAvg, type = "l")
# So now that we have space for all events, forgotten or recalled, let's convert *back* to a long format for the sake of analysis
df_recall_long <- df_recall_wide %>%
pivot_longer(cols = starts_with("SR-"),
names_to = "PID",
values_to = "Recalled") %>%
select(c(PID,Scene,Recalled)) %>%
merge(.,
subset(df_qual, select = c("PID","Rated")),
by = "PID", all.x = T) %>%
distinct() %>%
mutate(Half = ifelse(Scene < 19.5, "First", "Last"),
Congruent = ifelse(Rated == Half, "Rated", "Not Rated"),
Recalled_Cat = ifelse(Recalled == 1, "Recalled", "Not Recalled")) %>%
df_recall_long <- df_recall_wide %>%
pivot_longer(cols = starts_with("SR-"),
names_to = "PID",
values_to = "Recalled")
df_recall_long <- df_recall_wide %>%
pivot_longer(cols = starts_with("SR-"),
names_to = "PID",
values_to = "Recalled") %>%
select(c(PID,Scene,Recalled))
df_recall_long <- df_recall_wide %>%
pivot_longer(cols = starts_with("SR-"),
names_to = "PID",
values_to = "Recalled") %>%
select(c(PID,Scene,Recalled)) %>%
merge(.,
subset(df_qual, select = c("PID","Rated")),
by = "PID", all.x = T)
View(df_recall_long)
df_recall_long <- df_recall_wide %>%
pivot_longer(cols = starts_with("SR-"),
names_to = "PID",
values_to = "Recalled") %>%
select(c(PID,Scene,Recalled)) %>%
merge(.,
subset(df_qual, select = c("PID","Rated")),
by = "PID", all.x = T) %>%
distinct()
View(df_recall_long)
table(df_recall_long$PID)
df_recall_long <- df_recall_wide %>%
pivot_longer(cols = starts_with("SR-"),
names_to = "PID",
values_to = "Recalled") %>%
select(c(PID,Scene,Recalled)) %>%
merge(.,
subset(df_qual, select = c("PID","Rated")),
by = "PID", all.x = T) %>%
distinct() %>%
mutate(Half = ifelse(Scene < 19.5, "First", "Last"),
Congruent = ifelse(Rated == Half, "Rated", "Not Rated"),
Recalled_Cat = ifelse(Recalled == 1, "Recalled", "Not Recalled"))
# Constructing a summary dataframe to capture the proportion of rated and not rated events captured in each subject's free recall
df_summary <- df_recall_long %>% group_by(PID, Congruent) %>%
summarize(Proportion_Recalled = mean(Recalled == 1,
na.rm = TRUE))
df_rsa <- df_recall_wide %>%
# Step 1: Select only the Assessment columns
select(starts_with("SR-")) %>%
# Step 2: Calculate pairwise correlations across all Assessment columns
cor(method = "spearman", use = "complete.obs") %>%
# Step 3: Remove the upper triangle by setting it to NA
{ .[upper.tri(., diag = TRUE)] <- NA; . } %>%
# Step 4: Melt the matrix for ggplot
melt(na.rm = TRUE) %>%
# Step 5: Add condition columns by joining with rating data
left_join(paste0(dir_Work, "/3_Data/conditions.csv") %>% read.csv() %>% .[,1:2], by = c("Var1" = "Subject")) %>%
rename(Condition_Var1 = Condition) %>%
left_join(paste0(dir_Work, "/3_Data/conditions.csv") %>% read.csv() %>% .[,1:2], by = c("Var2" = "Subject")) %>%
rename(Condition_Var2 = Condition) %>%
# Step 6: Add a column indicating if the conditions match or not
mutate(Condition_Match = ifelse(Condition_Var1 == Condition_Var2, "Match", "Do Not Match"))
df_character <- df_qual %>%
# Step 1: Reducing the dataframe to a few relevant variables
select(PID, Assessment, Category, Character) %>%
# Step 2: Pivoting to a wider format
pivot_wider(names_from = PID, values_from = Assessment) %>%
# Step 3: Select only the Assessment columns
select(starts_with("SR-")) %>%
# Step 4: Calculate pairwise correlations across all Assessment columns
cor(method = "spearman", use = "complete.obs") %>%
# Step 5: Remove the upper triangle by setting it to NA
{ .[upper.tri(., diag = TRUE)] <- NA; . } %>%
# Step 6: Melt the matrix for ggplot
melt(na.rm = TRUE) %>%
# Step 7: Add condition columns by joining with rating data
left_join(paste0(dir_Work, "/3_Data/conditions.csv") %>% read.csv() %>% .[,1:2], by = c("Var1" = "Subject")) %>%
rename(Condition_Var1 = Condition) %>%
left_join(paste0(dir_Work, "/3_Data/conditions.csv") %>% read.csv() %>% .[,1:2], by = c("Var2" = "Subject")) %>%
rename(Condition_Var2 = Condition) %>%
# Step 8: Add a column indicating if the conditions match or not
mutate(Condition_Match = ifelse(Condition_Var1 == Condition_Var2, "Match", "Do Not Match"))
df_character <- df_qual %>%
# Step 1: Reducing the dataframe to a few relevant variables
select(PID, Assessment, Category, Character)
View(df_character)
View(df_character)
df_qual %>%
# Step 1: Reducing the dataframe to a few relevant variables
subset(., !is.na(.$Assessment), select(PID, Assessment, Category, Character)) %>%
# Step 2: Pivoting to a wider format
pivot_wider(names_from = PID, values_from = Assessment)
df_character <- df_qual %>%
# Step 1: Reducing the dataframe to a few relevant variables
select(PID, Assessment, Category, Character)
df_character <- df_qual %>%
# Step 1: Reducing the dataframe to a few relevant variables
select(PID, Assessment, Category, Character) %>%
subset(., !is.na(.$Assessment))
df_character <- df_qual %>%
# Step 1: Reducing the dataframe to a few relevant variables
select(PID, Assessment, Category, Character) %>%
subset(., !is.na(.$Assessment)) %>%
# Step 2: Pivoting to a wider format
pivot_wider(names_from = PID, values_from = Assessment)
View(df_character)
df_character <- df_qual %>%
# Step 1: Reducing the dataframe to a few relevant variables
select(PID, Assessment, Category, Character) %>%
# Step 2: Remove NA character assessments
subset(., !is.na(.$Assessment)) %>%
# Step 3: Pivoting to a wider format
pivot_wider(names_from = PID, values_from = Assessment) %>%
# Step 4: Select only the Assessment columns
select(starts_with("SR-")) %>%
# Step 5: Calculate pairwise correlations across all Assessment columns
cor(method = "spearman", use = "complete.obs") %>%
# Step 6: Remove the upper triangle by setting it to NA
{ .[upper.tri(., diag = TRUE)] <- NA; . } %>%
# Step 7: Melt the matrix for ggplot
melt(na.rm = TRUE) %>%
# Step 8: Add condition columns by joining with rating data
left_join(paste0(dir_Work, "/3_Data/conditions.csv") %>% read.csv() %>% .[,1:2], by = c("Var1" = "Subject")) %>%
rename(Condition_Var1 = Condition) %>%
left_join(paste0(dir_Work, "/3_Data/conditions.csv") %>% read.csv() %>% .[,1:2], by = c("Var2" = "Subject")) %>%
rename(Condition_Var2 = Condition) %>%
# Step 9: Add a column indicating if the conditions match or not
mutate(Condition_Match = ifelse(Condition_Var1 == Condition_Var2, "Match", "Do Not Match"))
# Creating a chi-square test to determine whether there are differences in what proportion of scenes subjects recall by whether the scenes occurred while they were rating or not rating
chisq.test(x = df_recall_long$Congruent,
y = df_recall_long$Recalled_Cat)
# Visualizing the chi square results
plot <- ggplot(data = df_recall_long, aes(x = Congruent, color = Recalled_Cat, fill = Recalled_Cat)) +
geom_bar() +
# scale_x_discrete("Condition") +
# scale_y_continuous(breaks = c(0,100,200,300,400)) +
labs(
x = NULL,
y ="Frequency") +
scale_color_brewer() +
scale_fill_brewer(palette = "Accent") +
# coord_cartesian(ylim=c(0.0, 425.0)) +
theme_classic() +
theme(plot.title = element_text(face="bold", size=8, hjust = 0.5)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0.5, face = "italic")) +
theme(plot.caption = element_text(size = 8, hjust = 0.0, face = "italic")) +
theme(axis.title = element_text(size = 10)) +
theme(axis.text.x = element_text(size = 14, color = "Black")) +
theme(axis.text.y = element_text(size = 12, color = "Black")) +
theme(legend.key.size = unit(0.5, 'cm')) +
theme(legend.title = element_text(size=8)) +
theme(legend.text = element_text(size=6))
plot
## If the pacman package manager is not currently installed on this system, install it.
if (require("pacman") == FALSE){
install.packages("pacman")
}
## Loading in my packages with my pacman manager
pacman::p_load(corrplot,
here,
lme4,
lmerTest,
performance,
reshape2,
tibble,
tidyverse)
## Setting Working Directory
(dir_Work <- here::here())
## From this we want to know who participants had thought had done it at the end of each section
df_qual <- read.csv(paste0(dir_Work, "/3_Data/Qualtrics/df_qualtrics.csv")) %>%
select("PID", starts_with("ChrAssess_")) %>%
# na.omit() %>%
merge(x = paste0(dir_Work, "/3_Data/conditions.csv") %>% read.csv() %>% .[,1:2],
y = .,
by.x = "Subject",
by.y = "PID") %>%
pivot_longer(cols = starts_with("ChrAssess_"),
names_to = "Category",
values_to = "Assessment") %>%
mutate(Character = str_extract(string = Category, "(?<=ChrAssess_)[^_]+"),
Category = str_extract(string = Category, "[^_]+$"),
PID = Subject) %>%
select(-Subject)
## Noting who rated which half
df_qual$Rated <- NA
df_qual$Rated[which(df_qual$PID %in% unique(subset(read.csv(paste0(dir_Work, "/3_Data/Ratings/df_behav.csv")), Condition == "A")$PID))] <- "First"
df_qual$Rated[which(df_qual$PID %in% unique(subset(read.csv(paste0(dir_Work, "/3_Data/Ratings/df_behav.csv")), Condition == "B")$PID))] <- "Last"
df_recall <- read.csv(paste0(dir_Work,"/3_Data/Recall/df_recall.csv")) %>%
# Remove all rows in which every value is NA
na.omit() %>%
# Patching up the PID variable names (Can't have variable names that start with numbers)
mutate(PID = paste0("SR-", sprintf("%04d", as.integer(PID))))
# Save every unique PID as a variable
PIDs <- unique(df_recall$PID)
# Specifying the names of rows and columns in the new dataframe
cols <- c("PID", "Scene", "Recalled")
rows <- 1:((length(PIDs)) * 35)
# Creating  the new dataframe
df_recall_wide <- as.data.frame(matrix(NA,
nrow = length(rows),
ncol =  length(cols),
dimnames = list(rows,
cols))) %>%
# Repeating the numbers 1 through 35 a number of times equivalent to the number of unique PIDs there are
mutate(Scene = PIDs %>% length() %>% rep(1:35, .),
# Repeating each of the unique PIDs a number of times equivalent to the number of scenes there are and sorting them alphanumerically
PID = PIDs %>% rep(., 35) %>% sort())
# Cleaning space
rm(cols,rows)
# Make all data equal to 0
df_recall_wide$Recalled <- 0
# Iterate through every PID
for (PID in PIDs){
# Iterate through every scene
for (SCENE in unique(df_recall_wide$Scene)){
# If any PID / Scene combo is present in the original dataframe
if (any(df_recall$PID == PID & df_recall$Scenes == SCENE)){
# Then find that PID / Scene Combo in the new dataframe and change the 0 to a 1
df_recall_wide$Recalled[df_recall_wide$PID == PID & df_recall_wide$Scene == SCENE] <- 1
}
}
}
rm(PID, df_recall)
# Pivoting to a wider format
df_recall_wide <- pivot_wider(df_recall_wide,
names_from = PID,
values_from = Recalled) %>%
.[-c(3,7,14,26,29,32,34),] # Removing B-Roll Transitions
# Calculating the average relative order of each scene
df_recall_wide$GroupAvg <- rowMeans(df_recall_wide[,2:ncol(df_recall_wide)], na.rm = T)
# Plotting
plot(df_recall_wide$Scene, df_recall_wide$GroupAvg, type = "l")
# So now that we have space for all events, forgotten or recalled, let's convert *back* to a long format for the sake of analysis
df_recall_long <- df_recall_wide %>%
pivot_longer(cols = starts_with("SR-"),
names_to = "PID",
values_to = "Recalled") %>%
select(c(PID,Scene,Recalled)) %>%
merge(.,
subset(df_qual, select = c("PID","Rated")),
by = "PID", all.x = T) %>%
distinct() %>%
mutate(Half = ifelse(Scene < 19.5, "First", "Last"),
Congruent = ifelse(Rated == Half, "Rated", "Not Rated"),
Recalled_Cat = ifelse(Recalled == 1, "Recalled", "Not Recalled"))
# Constructing a summary dataframe to capture the proportion of rated and not rated events captured in each subject's free recall
df_summary <- df_recall_long %>% group_by(PID, Congruent) %>%
summarize(Proportion_Recalled = mean(Recalled == 1,
na.rm = TRUE))
df_rsa <- df_recall_wide %>%
# Step 1: Select only the Assessment columns
select(starts_with("SR-")) %>%
# Step 2: Calculate pairwise correlations across all Assessment columns
cor(method = "spearman", use = "complete.obs") %>%
# Step 3: Remove the upper triangle by setting it to NA
{ .[upper.tri(., diag = TRUE)] <- NA; . } %>%
# Step 4: Melt the matrix for ggplot
melt(na.rm = TRUE) %>%
# Step 5: Add condition columns by joining with rating data
left_join(paste0(dir_Work, "/3_Data/conditions.csv") %>% read.csv() %>% .[,1:2], by = c("Var1" = "Subject")) %>%
rename(Condition_Var1 = Condition) %>%
left_join(paste0(dir_Work, "/3_Data/conditions.csv") %>% read.csv() %>% .[,1:2], by = c("Var2" = "Subject")) %>%
rename(Condition_Var2 = Condition) %>%
# Step 6: Add a column indicating if the conditions match or not
mutate(Condition_Match = ifelse(Condition_Var1 == Condition_Var2, "Match", "Do Not Match"))
df_character <- df_qual %>%
# Step 1: Reducing the dataframe to a few relevant variables
select(PID, Assessment, Category, Character) %>%
# Step 2: Remove NA character assessments
subset(., !is.na(.$Assessment)) %>%
# Step 3: Pivoting to a wider format
pivot_wider(names_from = PID, values_from = Assessment) %>%
# Step 4: Select only the Assessment columns
select(starts_with("SR-")) %>%
# Step 5: Calculate pairwise correlations across all Assessment columns
cor(method = "spearman", use = "complete.obs") %>%
# Step 6: Remove the upper triangle by setting it to NA
{ .[upper.tri(., diag = TRUE)] <- NA; . } %>%
# Step 7: Melt the matrix for ggplot
melt(na.rm = TRUE) %>%
# Step 8: Add condition columns by joining with rating data
left_join(paste0(dir_Work, "/3_Data/conditions.csv") %>% read.csv() %>% .[,1:2], by = c("Var1" = "Subject")) %>%
rename(Condition_Var1 = Condition) %>%
left_join(paste0(dir_Work, "/3_Data/conditions.csv") %>% read.csv() %>% .[,1:2], by = c("Var2" = "Subject")) %>%
rename(Condition_Var2 = Condition) %>%
# Step 9: Add a column indicating if the conditions match or not
mutate(Condition_Match = ifelse(Condition_Var1 == Condition_Var2, "Match", "Do Not Match"))
# Creating a chi-square test to determine whether there are differences in what proportion of scenes subjects recall by whether the scenes occurred while they were rating or not rating
chisq.test(x = df_recall_long$Congruent,
y = df_recall_long$Recalled_Cat)
# Visualizing the chi square results
plot <- ggplot(data = df_recall_long, aes(x = Congruent, color = Recalled_Cat, fill = Recalled_Cat)) +
geom_bar() +
# scale_x_discrete("Condition") +
# scale_y_continuous(breaks = c(0,100,200,300,400)) +
labs(
x = NULL,
y ="Frequency") +
scale_color_brewer() +
scale_fill_brewer(palette = "Accent") +
# coord_cartesian(ylim=c(0.0, 425.0)) +
theme_classic() +
theme(plot.title = element_text(face="bold", size=8, hjust = 0.5)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0.5, face = "italic")) +
theme(plot.caption = element_text(size = 8, hjust = 0.0, face = "italic")) +
theme(axis.title = element_text(size = 10)) +
theme(axis.text.x = element_text(size = 14, color = "Black")) +
theme(axis.text.y = element_text(size = 12, color = "Black")) +
theme(legend.key.size = unit(0.5, 'cm')) +
theme(legend.title = element_text(size=8)) +
theme(legend.text = element_text(size=6))
plot
View(df_recall_long)
## Creating a PID dataframe
df_condition <- df_qual$PID
## Creating a PID dataframe
df_condition <- df_qual$PID %>% as.data.frame()
## Creating a PID dataframe
df_condition <- df_qual$PID %>% as.data.frame() %>% distinct
## Creating a PID dataframe
df_condition <- df_qual$PID %>% as.data.frame %>% distinct
## If the pacman package manager is not currently installed on this system, install it.
if (require("pacman") == FALSE){
install.packages("pacman")
}
## Loading in my packages with my pacman manager
pacman::p_load(corrplot,
here,
lme4,
lmerTest,
performance,
reshape2,
tibble,
tidyverse)
## Setting Working Directory
(dir_Work <- here::here())
## From this we want to know who participants had thought had done it at the end of each section
df_qual <- read.csv(paste0(dir_Work, "/3_Data/Qualtrics/df_qualtrics.csv")) %>%
select("PID", starts_with("ChrAssess_")) %>%
# na.omit() %>%
merge(x = paste0(dir_Work, "/3_Data/conditions.csv") %>% read.csv() %>% .[,1:2],
y = .,
by.x = "Subject",
by.y = "PID") %>%
pivot_longer(cols = starts_with("ChrAssess_"),
names_to = "Category",
values_to = "Assessment") %>%
mutate(Character = str_extract(string = Category, "(?<=ChrAssess_)[^_]+"),
Category = str_extract(string = Category, "[^_]+$"),
PID = Subject) %>%
select(-Subject)
## Creating a PID dataframe
df_condition <- df_qual$PID %>% as.data.frame %>% distinct
## Noting who rated which half
df_condition$Rated <- NA
df_condition$Rated[which(df_condition$PID %in% unique(subset(read.csv(paste0(dir_Work, "/3_Data/Ratings/df_behav.csv")), Condition == "A")$PID))] <- "First"
df_condition$Rated[which(df_condition$PID %in% unique(subset(read.csv(paste0(dir_Work, "/3_Data/Ratings/df_behav.csv")), Condition == "B")$PID))] <- "Last"
View(df_condition)
## Creating a PID dataframe
df_condition <- df_qual$PID %>% as.data.frame %>% distinct
names(df_condition) <- "PID"
## Noting who rated which half
df_condition$Rated <- NA
df_condition$Rated[which(df_condition$PID %in% unique(subset(read.csv(paste0(dir_Work, "/3_Data/Ratings/df_behav.csv")), Condition == "A")$PID))] <- "First"
df_condition$Rated[which(df_condition$PID %in% unique(subset(read.csv(paste0(dir_Work, "/3_Data/Ratings/df_behav.csv")), Condition == "B")$PID))] <- "Last"
View(df_condition)
View(df_condition)
