df <- read.csv(file = file,
na.strings = c("", "NA", " "),
header = T,
sep=",",
dec = ".",
stringsAsFactors = F)
## Creating a Space Saving Variables ----
if (str_detect(string = file,
pattern = "_full_")){
Task <- ((str_detect(df$Video,
"FirstHalf\\.mp4$|FirstHalf_comp\\.mp4$") |
str_detect(df$Video,
"LastHalf\\.mp4$|LastHalf_comp\\.mp4$")) & !is.na(df$CertRate))
Cont <- (str_detect(df$Video,
"Control_*") & !is.na(df$CertRate))
}
## Creating a string separating function ----
strsep <- function(source,
output,
cond,
pattern){
if (output == "status"){
array <- unlist(strsplit(x = source[cond],
split = "', '",
fixed = T))
array[str_detect(string = array,
pattern = ".'.")] <-str_replace_all(string = array[str_detect(string = array,
pattern = ".'.")],
pattern = pattern,
replacement = "")
return(array)
}
if (output == "rating"){
array <- unlist(strsplit(x = source[cond],
split = ", ",
fixed = T))
array <-str_replace_all(string = array,
pattern = pattern,
replacement = "")
return(array)
}
}
## Separating Strings ----
if (str_detect(string = file,
pattern = "_full_")){
CertStat_task <- strsep(source = df$CertStat,
output = "status",
cond = Task,
pattern = "[^[:alnum:]]")
CertRate_task <- strsep(source = df$CertRate,
output = "rating",
cond = Task,
pattern = "'|^\\[|\\]$")
CertStat_cont <- strsep(source = df$CertStat,
output = "status",
cond = Cont,
pattern = "[^[:alnum:]]")
CertRate_cont <- strsep(source = df$CertRate,
output = "rating",
cond = Cont,
pattern = "'|^\\[|\\]$")
}
if (!str_detect(string = file,
pattern = "_full_")){
CertStat <- strsep(source = df$CertStat,
output = "status",
cond = !is.na(df$Certainty.Status),
pattern = "[^[:alnum:]]")
CertRate <- strsep(source = df$CertRate,
output = "rating",
cond = !is.na(df$Certainty.Status),
pattern = "'|^\\[|\\]$")
}
## Creating a longform dataframe ----
if (str_detect(string = file,
pattern = "_full_")){
rows <- 1:(length(CertStat_task) + length(CertStat_cont))
}
if (!str_detect(string = file,
pattern = "_full_")){
rows <- 1:length(CertStat)
}
cols <- c("PID", "Condition", "Video", "Frame", "Seconds", "CertRate", "CertStat",
"Time_Video", "Time_Overall", "FrameRate", "Date")
df_long <- data.frame(matrix(NA,
nrow = length(rows),
ncol = length(cols),
dimnames = list(rows, cols)))
## Copying data from original dataframe to long form ----
### Variables that just copy the value in the same row as video and duplicate it many times ...
df_long$PID <- rep(df$Participant.[1], length(rows))
### Correcting PID Errors
if (any(df_long$PID == "SR-6977") & str_detect(file, pattern = "SR-6799")){
df_long$PID[df_long$PID == "SR-6977"] <- "SR-6799"
}
if (str_detect(string = file, pattern = "_cond._")){
df_long$Condition <- rep(str_extract(string = str_extract(string = file, pattern = "cond."), pattern =".$"), length(rows))
}
if (!str_detect(string = file, pattern = "_cond._")){
df_long$Condition <- NA
}
if (!str_detect(string = file, pattern = "_full_")){
df_long$Video <- rep(df$Video[!is.na(df$Video)], length(rows))
df_long$FrameRate <- rep(df$frameRate[!is.na(df$Video)], length(rows))
}
if (str_detect(string = file, pattern = "_full_")){
df_long$Video <- c(rep(df$Video[Task], length(CertRate_task)),
rep(df$Video[Cont], length(CertRate_cont)))
df_long$FrameRate <- c(rep(df$frameRate[Task], length(CertRate_task)),
rep(df$frameRate[Cont], length(CertRate_cont)))
}
df_long$Date <- rep(df$date[1], length(rows))
df_long$Time_Overall <- rep(df$Offset[length(rownames(df))], length(rows))
### Variables that just copy pre-existing vectors ...
if (!str_detect(string = file, pattern = "_full_")){
df_long$Frame <- rows
df_long$CertRate <- CertRate
df_long$CertStat <- CertStat
}
if (str_detect(string = file, pattern = "_full_")){
df_long$Frame <- c(1:length(CertRate_task), 1:length(CertRate_cont))
df_long$CertRate <- c(CertRate_task, CertRate_cont)
df_long$CertStat <- c(CertStat_task, CertStat_cont)
}
### Variables that demand some calculations ...
if (str_detect(string = file, pattern = "_full_")){
df_long$Time_Video <- c(rep(df$Offset[Task] - df$Onset[Task], length(CertRate_task)),
rep(df$Offset[Cont] - df$Onset[Cont], length(CertRate_cont)))
df_long$Seconds <- c((df_long$Frame[1:length(CertRate_task)] / max(df_long$Frame[1:length(CertRate_task)])) * df_long$Time_Video[1:length(CertRate_task)],
(df_long$Frame[(length(CertRate_task) + 1):length(rownames(df_long))] / max(df_long$Frame[(length(CertRate_task) + 1):length(rownames(df_long))])) * df_long$Time_Video[(length(CertRate_task) + 1):length(rownames(df_long))])
}
if (!str_detect(string = file, pattern = "_full_")){
df_long$Time_Video <- rep(df$isi.Onset[(1:nrow(df))[!is.na(df$Video)] + 1] - df$isi.Offset[(1:nrow(df))[!is.na(df$Video)]], length(rows))
df_long$Seconds <- (df_long$Frame / max(df_long$Frame)) * df_long$Time_Video
}
### Cleaning space ...
if (str_detect(string = file, pattern = "_full_")){
rm(CertRate_cont, CertStat_cont, CertStat_task, CertRate_task, rows, cols, Task, Cont, df)
}
if (!str_detect(string = file, pattern = "_full_")){
rm(CertRate, CertStat, CertStat, CertRate, rows, cols, Task, Cont, df)
}
# Removing observations captured before the shave cutoff ----
if (shave_secs > 0){
df_long <- df_long[-which(df_long$Seconds < shave_secs &
!str_detect(df_long$Video, "Control")),]
}
if (!is.na(unit_secs)){
# Averaging rating values per second ----
if (str_detect(string = file, pattern = "_full_")){
Task_len <- floor(max(df_long$Time_Video[df_long$Video == unique(df_long$Video)[1]])) - shave_secs
Task_rows <- df_long$Video == unique(df_long$Video)[1]
Cont_len <- floor(max(df_long$Time_Video[df_long$Video == unique(df_long$Video)[2]]))
Cont_rows <- df_long$Video == unique(df_long$Video)[2]
}
## Creating an average dataframe ----
if (str_detect(string = file, pattern = "_full_")){
rows <- c(1:ceiling(Task_len / unit_secs),
1:ceiling(Cont_len / unit_secs))
}
if (!str_detect(string = file, pattern = "_full_")){
rows <- 1:(max(df_long$Time_Video) / unit_secs)
}
cols <- colnames(df_long)[-which(colnames(df_long) == "Seconds")]
df_avg <- data.frame(matrix(NA,
nrow = length(rows),
ncol = length(cols),
dimnames = list(rows, cols)))
## Copying data from original dataframe to long form ----
### Variables that just copy the value in the same row as video and duplicate it many times ...
if (str_detect(string = file, pattern = "_full_")){
df_avg$PID <- rep(df_long$PID[1], length(rows))
df_avg$Condition <- rep(df_long$Condition[1], length(rows))
df_avg$Video <- c(rep(unique(df_long$Video)[1], ceiling(Task_len / unit_secs)),
rep(unique(df_long$Video)[2], ceiling(Cont_len / unit_secs)))
df_avg$Time_Video <- c(rep(Task_len, ceiling(Task_len / unit_secs)),
rep(Cont_len, ceiling(Cont_len / unit_secs)))
}
if (!str_detect(string = file, pattern = "_full_")){
df_avg$PID <- rep(df_long$PID[1], length(rows))
df_avg$Condition <- rep(df_long$Condition[1], length(rows))
df_avg$Video <- rep(df_long$Video[1], length(rows))
df_avg$Time_Video <- rep(df_long$Time_Video[1], length(rows))
}
df_avg$Time_Overall <- rep(df_long$Time_Overall[1], length(rows))
df_avg$Date <- rep(df_long$Date[1], length(rows))
### Variables that just copy pre-existing vectors ...
for (h in unique(df_avg$Video)){
target_rows <- which(df_avg$Video == h)
for (i in 1:length(target_rows)){
if (!str_detect(h, "Control")) {
df_avg$SecondStart[target_rows[i]] <- (i * unit_secs) - unit_secs + 0.0001 + shave_secs
df_avg$SecondEnd[target_rows[i]] <- i * unit_secs + shave_secs
}
if (str_detect(h, "Control")) {
df_avg$SecondStart[target_rows[i]] <- (i * unit_secs) - unit_secs + 0.0001
df_avg$SecondEnd[target_rows[i]] <- i * unit_secs
}
if (df_avg$SecondEnd[target_rows[i]] > max(df_long$Seconds[df_long$Video == h])){
df_avg$SecondEnd[target_rows[i]] <- max(df_long$Seconds[df_long$Video == h])
}
}
}
### Variables that demand some calculations ...
if (!str_detect(string = file, pattern = "_full_")){
df_avg$FrameRate <- rep(max(df_long$Frame)/df_long$Time_Video[1], length(rows))
for (i in 1:nrow(df_avg)){
df_avg$Frame[i] <- paste(min(df_long$Frame[df_avg$SecondStart[i] &
df_long$Seconds <= df_avg$SecondEnd[i]]),
max(df_long$Frame[df_avg$SecondStart[i] &
df_long$Seconds <= df_avg$SecondEnd[i]]),
sep = " - ")
df_avg$CertRate[i] <- mean(as.numeric(df_long$CertRate[df_avg$SecondStart[i] &
df_long$Seconds <= df_avg$SecondEnd[i]]))
df_avg$CertRateVar[i] <- var(as.numeric(df_long$CertRate[df_avg$SecondStart[i] &
df_long$Seconds <= df_avg$SecondEnd[i]]))
if (str_detect(string = file,
pattern = "_cont_")){
if (df_avg$CertRate[i] < 0){
df_avg$CertStat[i] <- "Left"
}
if (df_avg$CertRate[i] > 0){
df_avg$CertStat[i] <- "Right"
}
if (df_avg$CertRate[i] == 0){
df_avg$CertStat[i] <- "Neither"
}
}
if (str_detect(string = file,
pattern = "_pract_|_task_")){
if (df_avg$CertRate[i] < 0){
df_avg$CertStat[i] <- "Guilty"
}
if (df_avg$CertRate[i] > 0){
df_avg$CertStat[i] <- "Innocent"
}
if (df_avg$CertRate[i] == 0){
df_avg$CertStat[i] <- "Neutral"
}
}
}
}
if (str_detect(string = file, pattern = "_full_")){
df_avg$FrameRate <- c(rep(max(df_long$Frame[Task_rows]) / ceiling(Task_len / unit_secs), ceiling(Task_len / unit_secs)),
rep(max(df_long$Frame[Cont_rows]) / ceiling(Cont_len / unit_secs), ceiling(Cont_len / unit_secs)))
for (h in unique(df_avg$Video)){
for (i in which(df_avg$Video == h)){
df_avg$Frame[i] <- paste(min(df_long$Frame[df_long$Seconds >= df_avg$SecondStart[i] &
df_long$Seconds <= df_avg$SecondEnd[i]  &
df_long$Video == h]),
max(df_long$Frame[df_long$Seconds >= df_avg$SecondStart[i] &
df_long$Seconds <= df_avg$SecondEnd[i]  &
df_long$Video == h]),
sep = " - ")
df_avg$CertRate[i] <- mean(as.numeric(df_long$CertRate[df_long$Seconds >= df_avg$SecondStart[i] &
df_long$Seconds <= df_avg$SecondEnd[i]  &
df_long$Video == h]))
df_avg$CertRateVar[i] <- var(as.numeric(df_long$CertRate[df_long$Seconds >= df_avg$SecondStart[i] &
df_long$Seconds <= df_avg$SecondEnd[i]  &
df_long$Video == h]))
if (h == unique(df_avg$Video)[1]){
if (df_avg$CertRate[i] < 0){
df_avg$CertStat[i] <- "Guilty"
}
if (df_avg$CertRate[i] > 0){
df_avg$CertStat[i] <- "Innocent"
}
if (df_avg$CertRate[i] == 0){
df_avg$CertStat[i] <- "Neutral"
}
}
if (h == unique(df_avg$Video)[2]){
if (df_avg$CertRate[i] < 0){
df_avg$CertStat[i] <- "Left"
}
if (df_avg$CertRate[i] > 0){
df_avg$CertStat[i] <- "Right"
}
if (df_avg$CertRate[i] == 0){
df_avg$CertStat[i] <- "Neither"
}
}
}
}
}
}
### Cleaning space ...
rm(rows, cols, h, i, Task_len, Task_rows, Cont_len, Cont_rows, strsep, target_rows)
View(df_temp)
sort(df_temp$CertRate)
sort(df_temp$CertRate,decreasing = T)
## Libraries
pacman::p_load(here, tidyverse)
# Loading the custom cleaning function
source("https://raw.githubusercontent.com/wj-mitchell/neuRotools/main/rucleaner.R", local= T)
# Noting the index number of all .csv files in the directory
dir <- paste0(here(), "/3_Data/Task/")
files <- list.files(path = dir,
full.names = F) %>%
.[grep(pattern = "*\\.csv",
x = .)]
# Iterating through sequential integers up to the total number of .csvs
# Taking this approach rather than using the index numbers directly makes
# this code robust to any ordering changes that might occur in the files.
# (i.e., if the .csv files were listed after the .txts for some reason,
# the conditional statements binding the data together would get confused)
for (INDEX in 1:length(files)) {
# Running the cleaner function for an individual file within the noted directory
df_temp <- rucleaner(file = files[INDEX],
dir = dir,
unit_secs = NA,
shave_secs = 0)
# if this is the first file we're cleaning . . .
if (INDEX == 1) {
# Make it the master dataframe
df <- df_temp
# Remove the temporary dataframe
rm(df_temp)
}
# If this is not the first file we're cleaning . . .
if (INDEX != 1) {
# Append it to the end of the master dataframe
df <- rbind(df, df_temp)
# Remove the temporary dataframe
rm(df_temp)
}
}
## Creating a dataframe of only first half raters
df_behav_FH <- subset(df,
df$Video != "StimVidControl.mp4" &
df$Video != "StimVidControl_Undoing.mp4" &
df$Condition == "A",
select = c(PID, CertRate, SecondEnd)) %>%
pivot_wider(names_from = PID, values_from = CertRate)
View(df)
## Creating a dataframe of only first half raters
df_behav_FH <- subset(df,
df$Video != "StimVidControl.mp4" &
df$Video != "StimVidControl_Undoing.mp4" &
df$Condition == "A",
select = c(PID, CertRate, Seconds)) %>%
pivot_wider(names_from = PID, values_from = CertRate)
View(df_behav_FH)
## Creating a dataframe of only first half raters
df_behav_FH <- subset(df,
df$Video != "StimVidControl.mp4" &
df$Video != "StimVidControl_Undoing.mp4" &
df$Condition == "A",
select = c(PID, CertRate, Seconds))
View(df_behav_FH)
## Creating a dataframe of only first half raters
df_behav_FH <- subset(df,
df$Video != "StimVidControl.mp4" &
df$Video != "StimVidControl_Undoing.mp4" &
df$Condition == "A",
select = c(PID, CertRate, Seconds)) %>%
arrange(PID, Seconds) %>%  # Sort by PID and Seconds
group_by(PID) %>%  # Group by PID
mutate(Change = c(0, diff(CertRate))) %>%  # Calculate changes in CertRate, prepend 0 for the first row
ungroup() %>%  # Remove grouping
mutate(ButtonPress = if_else(abs(Change) == 5, 1, 0),  # Identify button presses
Interval = floor(Seconds / 2) * 2) %>%  # Create 2-second intervals
group_by(PID, Interval) %>%  # Group by PID and Interval
summarize(ButtonPresses = sum(ButtonPress))  # Count button presses per interval
df_behav_FH <- subset(df,
df$Video != "StimVidControl.mp4" &
df$Video != "StimVidControl_Undoing.mp4" &
df$Condition == "A",
select = c(PID, CertRate, Seconds)) %>%
arrange(PID, Seconds) %>%  # Sort by PID and Seconds
group_by(PID) %>%  # Group by PID
mutate(Change = c(0, diff(CertRate)))
df_behav_FH <- subset(df,
df$Video != "StimVidControl.mp4" &
df$Video != "StimVidControl_Undoing.mp4" &
df$Condition == "A",
select = c(PID, CertRate, Seconds)) %>%
arrange(PID, Seconds)
df_behav_FH <- subset(df,
df$Video != "StimVidControl.mp4" &
df$Video != "StimVidControl_Undoing.mp4" &
df$Condition == "A",
select = c(PID, CertRate, Seconds)) %>%
arrange(PID, Seconds) %>%  # Sort by PID and Seconds
group_by(PID)
str(df_behav_FH)
df_behav_FH$CertRate <- df_behav_FH$CertRate %>%
as.numeric()
df_behav_FH <- df_behav_FH %>%
arrange(PID, Seconds) %>%  # Sort by PID and Seconds
group_by(PID) %>%  # Group by PID
mutate(Change = c(0, diff(CertRate)))
df_behav_FH <- subset(df,
df$Video != "StimVidControl.mp4" &
df$Video != "StimVidControl_Undoing.mp4" &
df$Condition == "A",
select = c(PID, CertRate, Seconds))
df_behav_FH$CertRate <- df_behav_FH$CertRate %>%
as.numeric()
df_behav_FH <- df_behav_FH %>%
arrange(PID, Seconds) %>%  # Sort by PID and Seconds
group_by(PID) %>%  # Group by PID
mutate(Change = c(0, diff(CertRate))) %>%  # Calculate changes in CertRate, prepend 0 for the first row
ungroup() %>%  # Remove grouping
mutate(ButtonPress = if_else(abs(Change) == 5, 1, 0),  # Identify button presses
Interval = floor(Seconds / 2) * 2) %>%  # Create 2-second intervals
group_by(PID, Interval) %>%  # Group by PID and Interval
summarize(ButtonPresses = sum(ButtonPress))  # Count button presses per interval
View(df_behav_FH)
sum(df_behav_FH$ButtonPresses)
df$CertRate <- df$CertRate %>% as.numeric()
df$CertRate <- df$CertRate %>% as.numeric()
df_behav_FH <- subset(df,
df$Video != "StimVidControl.mp4" &
df$Video != "StimVidControl_Undoing.mp4" &
df$Condition == "A",
select = c(PID, CertRate, Seconds))
sum(abs(df_behav_FH$CertRate))
df_behav_FH <- subset(df,
df$Video != "StimVidControl.mp4" &
df$Video != "StimVidControl_Undoing.mp4" &
df$Condition == "A",
select = c(PID, CertRate, Seconds)) %>%
arrange(PID, Seconds) %>%  # Sort by PID and Seconds
group_by(PID) %>%  # Group by PID
mutate(Change = c(0, diff(CertRate))) %>%  # Calculate changes in CertRate, prepend 0 for the first row
ungroup()
sum(abs(df_behav_FH$CertRate))
View(df_behav_FH)
sum(abs(df_behav_FH$Change))
sum(abs(df_behav_FH$Change))/5
455/19
(455/19)/22
df_behav_FH <- subset(df,
df$Video != "StimVidControl.mp4" &
df$Video != "StimVidControl_Undoing.mp4" &
df$Condition == "A",
select = c(PID, CertRate, Seconds)) %>%
arrange(PID, Seconds) %>%  # Sort by PID and Seconds
group_by(PID) %>%  # Group by PID
mutate(Change = c(0, diff(CertRate))) %>%  # Calculate changes in CertRate, prepend 0 for the first row
ungroup() %>%  # Remove grouping
mutate(ButtonPress = if_else(abs(Change) == 5, 1, 0),  # Identify button presses
Interval = floor(Seconds / 2) * 2) %>%  # Create 2-second intervals
group_by(PID, Interval) %>%  # Group by PID and Interval
summarize(ButtonPresses = sum(ButtonPress))  # Count button presses per interval
View(df_behav_FH)
df_behav_FH <- subset(df,
df$Video != "StimVidControl.mp4" &
df$Video != "StimVidControl_Undoing.mp4" &
df$Condition == "A",
select = c(PID, CertRate, Seconds)) %>%
arrange(PID, Seconds) %>%  # Sort by PID and Seconds
mutate(Change = c(0, diff(CertRate))) %>%  # Calculate changes in CertRate, prepend 0 for the first row
mutate(ButtonPress = if_else(abs(Change) == 5, 1, 0),  # Identify button presses
Interval = floor(Seconds / 2) * 2) %>%  # Create 2-second intervals
group_by(Interval) %>%  # Group by Interval only
summarize(TotalButtonPresses = sum(ButtonPress), .groups = 'drop')  # Count button presses per interval and drop grouping
View(df_behav_FH)
sum(df_behav_FH$TotalButtonPresses)
View(df_behav_FH)
df_behav_FH$TotalButtonPresses <- scale(df_behav_FH$TotalButtonPresses) %>% as.numeric()
View(df_behav_FH)
View(df_behav_FH)
View(df_behav_FH)
View(df_behav_FH)
df_behav_FH$Interval <- df_behav_FH$Interval + 60
df_behav_FH$Dur <- 2
df_behav_FH <- select = c(Interval, Dur, TotalButtonPresses)
df_behav_FH <- select = c("Interval", "Dur", "TotalButtonPresses")
df_behav_FH <- select(c("Interval", "Dur", "TotalButtonPresses"))
df_behav_FH <- subset(df_behav_FH,select = c("Interval", "Dur", "TotalButtonPresses"))
View(df_behav_FH)
## Creating a dataframe of only first half raters
df_behav_FH <- subset(df,
df$Video != "StimVidControl.mp4" &
df$Video != "StimVidControl_Undoing.mp4" &
df$Condition == "A",
select = c(PID, CertRate, Seconds)) %>%
arrange(PID, Seconds) %>%  # Sort by PID and Seconds
mutate(Change = c(0, diff(CertRate))) %>%  # Calculate changes in CertRate, prepend 0 for the first row
mutate(ButtonPress = if_else(abs(Change) == 5, 1, 0),  # Identify button presses
Interval = floor(Seconds / 2) * 2) %>%  # Create 2-second intervals
group_by(Interval) %>%  # Group by Interval only
summarize(TotalButtonPresses = sum(ButtonPress), .groups = 'drop')  # Count button presses per interval and drop grouping
df_behav_FH$TotalButtonPresses <- scale(df_behav_FH$TotalButtonPresses) %>% as.numeric()
df_behav_FH$Interval <- df_behav_FH$Interval + 60
df_behav_FH$Dur <- 2
df_behav_FH <- subset(df_behav_FH,select = c("Interval", "Dur", "TotalButtonPresses"))
write.csv(df_behav_FH, paste0(here(), "/2_Analysis/run-1_vols-729.csv"))
df_behav_FH$Interval <- df_behav_FH$Interval + 30
write.csv(df_behav_FH, paste0(here(), "/2_Analysis/run-1_vols-759.csv"))
## Creating a dataframe of only second half raters
df_behav_SH <- subset(df,
df$Video != "StimVidControl.mp4" &
df$Video != "StimVidControl_Undoing.mp4" &
df$Condition == "A",
select = c(PID, CertRate, Seconds)) %>%
arrange(PID, Seconds) %>%  # Sort by PID and Seconds
mutate(Change = c(0, diff(CertRate))) %>%  # Calculate changes in CertRate, prepend 0 for the first row
mutate(ButtonPress = if_else(abs(Change) == 5, 1, 0),  # Identify button presses
Interval = floor(Seconds / 2) * 2) %>%  # Create 2-second intervals
group_by(Interval) %>%  # Group by Interval only
summarize(TotalButtonPresses = sum(ButtonPress), .groups = 'drop')  # Count button presses per interval and drop grouping
df_behav_SH$TotalButtonPresses <- scale(df_behav_SH$TotalButtonPresses) %>% as.numeric()
df_behav_SH$Interval <- df_behav_SH$Interval + 60
df_behav_SH$Dur <- 2
df_behav_SH <- subset(df_behav_SH,select = c("Interval", "Dur", "TotalButtonPresses"))
write.csv(df_behav_SH, paste0(here(), "/2_Analysis/run-2_vols-729.csv"))
df_behav_SH$Interval <- df_behav_SH$Interval + 30
View(df_behav_SH)
write.csv(df_behav_SH, paste0(here(), "/2_Analysis/run-2_vols-759.csv"))
